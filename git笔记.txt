初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

    1、使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    2、使用命令git commit -m <message>，完成。



要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用Git reset --hard commit_id

穿梭前，用git log可以查看提交历史，以便确定要退回到哪个版本

要重返未来， 用git relog查看命令历史，以确定要回到未来的哪个版本

咱暂缓区是Git非常重要的概念，弄明白了暂缓区，就弄明白了Git的很多操作到底干了什么

为什么Git比其他版本控制系统设计得更优秀，因为Git跟踪并管理得是修改，而非文件，每次修改，如果不用git add到暂缓区，那就不会加入到git commit中

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD file,就回到了场景1，第二部按场景1操作
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退异界，不过前提时没有推送到远程库

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能回复到最新版本，你会丢失最近一次提交后修改的内容

使用命令git remote add origin git@github.com:michaelliao/learngit.git将本地Git于远程GitHub关联起来，第一次使用git push -u origin master命令把本地文件
上传到远程库，其后可以使用git push origin master上传本地文件

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git;

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是没有联网都可以正常工作，二SVN在没有网络的时候是拒绝干活的！当有网络的时候
再把本地提交推送一下就完成了同步，真是太方便了

Github给出的地址不知一个，可以用ssh协议的命令：git@github.com:stupid0fish/gitskill.git（地址），还可以使用https协议的命令：https://github.com/stupid0fish/gitskill.git
实际上，git支持多种协议，默认的git：//使用ssh协议，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦，就是每次推送都必须输入口令，但在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆

Git支持多种协议，包括https，但通过ssh支持的原生ssh协议速度最快

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建并切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须先解决冲突，解决冲突后再提交合并，合并完成
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交
用git log --graph 可以看到分支合并图（--pretty=oneline --abbrev-commit）


Git十分强大在团队开发中应该充分应用
合并分支时，加上--no-ff参数就可以使用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过的合并






