初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

    1、使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    2、使用命令git commit -m <message>，完成。



要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用Git reset --hard commit_id

穿梭前，用git log可以查看提交历史，以便确定要退回到哪个版本

要重返未来， 用git relog查看命令历史，以确定要回到未来的哪个版本

咱暂缓区是Git非常重要的概念，弄明白了暂缓区，就弄明白了Git的很多操作到底干了什么

为什么Git比其他版本控制系统设计得更优秀，因为Git跟踪并管理的是修改，而非文件，每次修改，如果不用git add到暂缓区，那就不会加入到git commit中

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分两步，第一步用命令git reset HEAD file,就回到了场景1，第二部按场景1操作
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退异界，不过前提时没有推送到远程库

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能回复到最新版本，你会丢失最近一次提交后修改的内容

使用命令git remote add origin git@github.com:michaelliao/learngit.git将本地Git于远程GitHub关联起来，第一次使用git push -u origin master命令把本地文件
上传到远程库，其后可以使用git push origin master上传本地文件

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git;

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是没有联网都可以正常工作，而SVN在没有网络的时候是拒绝干活的！当有网络的时候
再把本地提交推送一下就完成了同步，真是太方便了

Github给出的地址不止一个，可以用ssh协议的命令：git@github.com:stupid0fish/gitskill.git（地址），还可以使用https协议的命令：https://github.com/stupid0fish/gitskill.git
实际上，git支持多种协议，默认的git：//使用ssh协议，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦，就是每次推送都必须输入口令，但在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆

Git支持多种协议，包括https，但通过ssh支持的原生ssh协议速度最快

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建并切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须先解决冲突，解决冲突后再提交合并，合并完成
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交
用git log --graph 可以看到分支合并图（--pretty=oneline --abbrev-commit）


Git十分强大在团队开发中应该充分应用
合并分支时，加上--no-ff参数就可以使用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过的合并

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除; 当手头工作没有完成时，先把现场git stash一下，然后修复bug，修复后在git stash pop，回到工作现场

git stash list查看stash内容，git stash aplly stash@{}回复指定stash，此时stash内容并不删除，需要用git stash drop删除; git stash pop恢复并删除

开发一个新feature，最好创建一个新的分支
如果要丢弃一个没有合并过的分支，可以通过git branch -D <name> 强行删除

多人协作的工作模式通常是这样的：
	1、首先，可以试图用git push origin <branch-name>推送自己的修改;
	2、如果推送失败，则因为远程分支比你的本地更新，需要git pull试图合并；
	3、如果合并有冲突，则解决冲突，并在本地提交
	4、没有冲突或者冲突解决后，再用git push origin <branch-name>推送就能成功
如果git pull提示no tracking information， 则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>


查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，如果使用git push origin branch-name， 如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程对应赢得新分支，使用git checkout -b branch-name origin/branch-name,本地和远程分支名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先解决冲突

命令git tag <tagname>用于新建一个标签，默认为HEAD， 也可以指定一个commit id；
命令git tag -a <tagname> - m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签；

命令git push origin <tagname> 可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签，但是否真正删除还需登陆GitHub确认；


不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
所有配置文件可以直接在线浏览：https://github.com/github/gitignore

忽略文件的规则：
	1、忽略操作系统自动生成的文件，比如缩略图等；
	2、忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如java编译生成的.class文件
	3、忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
最后一步就是把.gitignore也提交到Git，就完成了！当然检验.gitignore的标准是git status命令是不是说working directory clean

当你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了；此时若确要添加，可以使用-f强制添加：git add -f file；或者你发现可能是
.gitignore写的有问题，需要找出来到底哪个规则写错了可以使用git check-ignore命令检查：
$git check-ignore -v app.class
-gitignore:3:*.class app.class 
git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们可以知道应该修订哪个规则。

.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


命令别名：
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

可以修改配置文件
	别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。




    搭建Git服务器非常简单，通常10分钟即可完成；

    要方便管理公钥，用Gitosis；

    要像SVN那样变态地控制权限，用Gitolite。
	
第一步，安装git：

$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git

第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git

Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git

第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

	git:x:1001:1001:,,,:/home/git:/bin/bash

改为：

	git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

	这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

	现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：



